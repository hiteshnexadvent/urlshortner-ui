import axios from 'axios';
import React, { useContext, useState } from 'react'
import { useNavigate } from 'react-router-dom';
import UserContext from './UseContext';
import { toast } from 'react-toastify';
// import ReCAPTCHA from 'react-google-recaptcha';


export default function Login() {

  const [formData, setformData] = useState({ email: '', pass: '' });

  // const [captchaToken, setCaptchaToken] = useState(null);

  const [message] = useState('');



  const { setuserId } = useContext(UserContext);

  const navigate = useNavigate();

  const handleChange = (e) => {
    setformData({ ...formData, [e.target.name]: e.target.value });
  }

  //  const handleCaptcha = (value) => {
  //   setCaptchaToken(value); // this is the token generated by reCAPTCHA
  // };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // if (!captchaToken) {
    //   setMessage("‚ùå Please complete the reCAPTCHA.");
    //   return;
    // }

    try {
      
      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/login`, {
        email: formData.email,
        pass: formData.pass,
        // captcha: captchaToken,
      }, {
        headers: {
          'Content-Type': 'application/json'
        },
        withCredentials: true
      })
      if (response.status === 200 && response.data.success) {
        toast.success(response.data.message, {
          position: 'top-right',
          autoClose: 2000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: false,
          draggable: true,
          progress: undefined,
        });
        setuserId(response.data.userId);
        navigate('/');
      }


    }

    catch (error) {
      if (error.response) {
        const status = error.response.status;
        const message = error.response.data.message;

        if (status === 404) {
          toast.error('User does not exist', {
            position: 'top-right',
            autoClose: 3000,
          });
        } else if (status === 3 || error.response.data.code === 3) {
          toast.error('Account temporarily locked for 24 hours due to multiple failed login attempts.', {
            position: 'top-right',
            autoClose: 3000,
          });
        } else if (status === 401) {
          toast.error(message, {
            position: 'top-right',
            autoClose: 3000,
          });
        } else {
          toast.error(message || 'Server error occurred', {
            position: 'top-right',
            autoClose: 3000,
          });
        }
      } else {
        toast.error('Network or server error', {
          position: 'top-right',
          autoClose: 3000,
        });
      }
    }

 
  }

  return (
   <div style={{ 
  backgroundColor: '#000214', 
  width: '100%', 
  height: '100vh', 
  display: 'flex', 
  justifyContent: 'center', 
  alignItems: 'center', 
  flexDirection: 'column',
      fontFamily: 'Arial, sans-serif',
  textAlign:'start'
}}>

  <h1
    style={{
      background: 'linear-gradient(90deg, #144EE3, #EB568E)',
      WebkitBackgroundClip: 'text',
      WebkitTextFillColor: 'transparent',
      fontSize: '2.5rem',
      marginBottom: '20px',
      fontWeight:'700'
    }}
  >
    User Login
  </h1>

  <form 
    onSubmit={handleSubmit} 
    style={{
      display: 'flex',
      flexDirection: 'column',
      gap: '15px',
      backgroundColor: '#0a0a2a',
      padding: '30px',
      borderRadius: '12px',
      boxShadow: '0 0 10px rgba(255, 255, 255, 0.1)',
      minWidth: '300px'
    }}
  >

    <label style={{ color: '#fff' }}>Email:
      <input 
        type="email" 
        name='email' 
        onChange={handleChange} 
        value={formData.email} 
        required 
        style={{
          width: '100%',
          padding: '10px',
          marginTop: '5px',
          borderRadius: '8px',
          border: '1px solid #ccc',
          outline: 'none'
        }}
      />
    </label>

    <label style={{ color: '#fff' }}>Password:
      <input 
        type="password" 
        name='pass' 
        onChange={handleChange} 
        value={formData.pass} 
        required 
        style={{
          width: '100%',
          padding: '10px',
          marginTop: '5px',
          borderRadius: '8px',
          border: '1px solid #ccc',
          outline: 'none'
        }}
      />
        </label>
        
        {/* <ReCAPTCHA
  sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY}
  onChange={handleCaptcha}
/> */}

    <button 
      type="submit" 
      style={{
        padding: '12px',
        backgroundColor: '#144EE3',
        color: '#fff',
        border: 'none',
        borderRadius: '8px',
        cursor: 'pointer',
        fontWeight: 'bold',
        transition: 'background 0.3s ease'
      }}
      onMouseOver={e => e.target.style.backgroundColor = '#0f3bb3'}
      onMouseOut={e => e.target.style.backgroundColor = '#144EE3'}
    >
      Submit
        </button>

        <a href="/verify" style={{ textDecoration: 'none', color: '#b4b1b0a7' }}>Forget Password</a>
        
        <p style={{color:'#78b6ca'}}>{message}</p>

      </form>
      
      

</div>

  )
}
